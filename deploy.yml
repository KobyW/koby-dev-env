---
- name: Setup Development Environment
  hosts: all
  become: yes
  vars:
    selected_tasks: "all"

  tasks:
    - name: Ensure git is installed
      become: yes
      ansible.builtin.package:
        name: git
        state: present

    - name: Ensure curl is installed
      become: yes
      ansible.builtin.package:
        name: curl
        state: present

    - name: Clone koby-dev-env repository
      ansible.builtin.git:
        repo: https://github.com/KobyW/koby-dev-env
        dest: "{{ ansible_env.HOME }}/koby-dev-env"
        version: main
        update: no

    - name: Install zsh
      become: yes
      ansible.builtin.package:
        name: zsh
        state: present
      when: "'all' in selected_tasks or 'light' in selected_tasks or 'zsh' in selected_tasks"

    - name: Install pip
      become: yes
      ansible.builtin.package:
        name: python3-pip
        state: present
      when: "'all' in selected_tasks or 'pip' in selected_tasks"

    - name: Install expect
      become: yes
      ansible.builtin.package:
        name: expect
        state: present
      when: "'all' in selected_tasks or 'expect' in selected_tasks"

    - name: Check if Oh My Zsh is installed
      ansible.builtin.stat:
        path: "{{ ansible_env.HOME }}/.oh-my-zsh"
      register: oh_my_zsh_installed

    - name: Install Oh My Zsh
      ansible.builtin.shell: sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
      when: 
        - not oh_my_zsh_installed.stat.exists
        - "'all' in selected_tasks or 'light' in selected_tasks or 'oh-my-zsh' in selected_tasks"

    - name: Install P10K
      block:

        - name: Clone Powerlevel10k repository
          ansible.builtin.git:
            repo: 'https://github.com/romkatv/powerlevel10k.git'
            dest: "{{ ansible_env.HOME }}/.oh-my-zsh/custom/themes/powerlevel10k"
            depth: 1

        - name: Backup existing p10k.zsh
          ansible.builtin.copy:
            src: "{{ ansible_env.HOME }}/.p10k.zsh"
            dest: "{{ ansible_env.HOME }}/.p10k.zsh.bak"
            remote_src: yes
          ignore_errors: yes

        - name: Link p10k.zsh
          ansible.builtin.file:
            src: "{{ ansible_env.HOME }}/koby-dev-env/configs/p10k.zsh"
            dest: "{{ ansible_env.HOME }}/.p10k.zsh"
            state: link
            force: yes

      when: "'all' in selected_tasks or 'light' in selected_tasks or 'p10k' in selected_tasks"

    - name: Check if Neovim is installed
      ansible.builtin.stat:
        path: "{{ ansible_env.HOME }}/.local/bin/nvim"
      register: neovim_installed

    - name: Install Neovim v0.9.5
      block:

        - name: Create .local/bin directory
          ansible.builtin.file:
            path: "{{ ansible_env.HOME }}/.local/bin"
            state: directory
            mode: '0755'

        - name: Download Neovim
          ansible.builtin.get_url:
            url: https://github.com/neovim/neovim/releases/download/v0.9.5/nvim-linux64.tar.gz
            dest: /tmp/nvim-linux64.tar.gz

        - name: Extract Neovim
          become: yes
          ansible.builtin.unarchive:
            src: /tmp/nvim-linux64.tar.gz
            dest: "{{ ansible_env.HOME }}/.local/bin/"
            remote_src: yes

        - name: Remove Neovim archive
          ansible.builtin.file:
            path: /tmp/nvim-linux64.tar.gz
            state: absent

        - name: Ensure NeoVim is exported to PATH via zshrc
          ansible.builtin.lineinfile:
            path: "{{ ansible_env.HOME }}/.zshrc"
            line: 'export PATH="/usr/local/nvim-linux64/bin:$PATH"'

      when: 
        - not neovim_installed.stat.exists
        - "'all' in selected_tasks or 'light' in selected_tasks or 'neovim' in selected_tasks"

    - name: Copy .zshrc to home directory
      block:
        - name: Backup existing .zshrc
          ansible.builtin.copy:
            src: "{{ ansible_env.HOME }}/.zshrc"
            dest: "{{ ansible_env.HOME }}/.zshrc.bak"
            remote_src: yes
          ignore_errors: yes
        - name: Link .zshrc
          ansible.builtin.file:
            src: "{{ ansible_env.HOME }}/koby-dev-env/configs/zshrc"
            dest: "{{ ansible_env.HOME }}/.zshrc"
            state: link
            force: yes
      when: "'all' in selected_tasks or 'zshrc-copy' in selected_tasks"

    - name: Install tmux
      become: yes
      ansible.builtin.package:
        name: tmux
        state: present
      when: "'all' in selected_tasks or 'light' in selected_tasks or 'tmux' in selected_tasks"

    - name: Install tpm (tmux plugin manager)
      ansible.builtin.git:
        repo: https://github.com/tmux-plugins/tpm
        dest: "{{ ansible_env.HOME }}/.tmux/plugins/tpm"
        update: no
      when: "'all' in selected_tasks or 'light' in selected_tasks or 'tpm' in selected_tasks or 'tmux' in selected_tasks"

    - name: Install fzf
      become: yes
      ansible.builtin.package:
        name: fzf
        state: present
      when: "'all' in selected_tasks or 'light' in selected_tasks or 'fzf' in selected_tasks"

    - name: Copy .tmux.conf to home directory
      block:
        - name: Backup existing .tmux.conf
          ansible.builtin.copy:
            src: "{{ ansible_env.HOME }}/.tmux.conf"
            dest: "{{ ansible_env.HOME }}/.tmux.conf.bak"
            remote_src: yes
          ignore_errors: yes
        - name: Link .tmux.conf
          ansible.builtin.file:
            src: "{{ ansible_env.HOME }}/koby-dev-env/configs/tmux.conf"
            dest: "{{ ansible_env.HOME }}/.tmux.conf"
            state: link
            force: yes
      when: "'all' in selected_tasks or 'tmux-copy' in selected_tasks"

    - name: Install npm
      become: yes
      ansible.builtin.package:
        name: npm
        state: present
      when: "'all' in selected_tasks or 'npm' in selected_tasks"

    - name: Install unzip
      become: yes
      ansible.builtin.package:
        name: unzip
        state: present
      when: "'all' in selected_tasks or 'unzip' in selected_tasks"

    - name: Install wget
      become: yes
      ansible.builtin.package:
        name: wget
        state: present
      when: "'all' in selected_tasks or 'wget' in selected_tasks"

    - name: Check if pfetch is installed
      ansible.builtin.stat:
        path: /usr/local/bin/pfetch
      register: pfetch_installed

    - name: Install pfetch
      block:
        - name: Download pfetch
          ansible.builtin.get_url:
            url: https://github.com/dylanaraps/pfetch/archive/master.zip
            dest: /tmp/pfetch-master.zip
        - name: Unzip pfetch
          ansible.builtin.unarchive:
            src: /tmp/pfetch-master.zip
            dest: /tmp/
            remote_src: yes
        - name: Install pfetch
          become: yes
          ansible.builtin.copy:
            src: /tmp/pfetch-master/pfetch
            dest: /usr/local/bin/pfetch
            mode: '0755'
            remote_src: yes
        - name: Clean up pfetch files
          ansible.builtin.file:
            path: "{{ item }}"
            state: absent
          loop:
            - /tmp/pfetch-master.zip
            - /tmp/pfetch-master
      when: 
        - not pfetch_installed.stat.exists
        - "'all' in selected_tasks or 'light' in selected_tasks or 'pfetch' in selected_tasks"

    - name: Install lazydocker
      ansible.builtin.shell: curl https://raw.githubusercontent.com/jesseduffield/lazydocker/master/scripts/install_update_linux.sh | bash
      args:
        creates: /usr/local/bin/lazydocker
      when: "'all' in selected_tasks or 'light' in selected_tasks or 'lazydocker' in selected_tasks"

    - name: Check if Lazygit is installed
      ansible.builtin.stat:
        path: /usr/local/bin/lazygit
      register: lazygit_installed

    - name: Install Lazygit
      block:
        - name: Download Lazygit
          ansible.builtin.get_url:
            url: "https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_0.42.0_Linux_x86_64.tar.gz"
            dest: /tmp/lazygit.tar.gz
        - name: Extract Lazygit
          ansible.builtin.unarchive:
            src: /tmp/lazygit.tar.gz
            dest: /tmp/
            remote_src: yes
        - name: Install Lazygit
          become: yes
          ansible.builtin.copy:
            src: /tmp/lazygit
            dest: /usr/local/bin/lazygit
            mode: '0755'
            remote_src: yes
        - name: Clean up Lazygit files
          ansible.builtin.file:
            path: "{{ item }}"
            state: absent
          loop:
            - /tmp/lazygit.tar.gz
            - /tmp/lazygit
      when: 
        - not lazygit_installed.stat.exists
        - "'all' in selected_tasks or 'light' in selected_tasks or 'lazygit' in selected_tasks"

    - name: Install cargo
      ansible.builtin.shell: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      args:
        creates: "{{ ansible_env.HOME }}/.cargo/bin/cargo"
      when: "'all' in selected_tasks or 'cargo' in selected_tasks"

    - name: Install zsh-autosuggestions
      ansible.builtin.git:
        repo: https://github.com/zsh-users/zsh-autosuggestions
        dest: "{{ ansible_env.HOME }}/.oh-my-zsh/custom/plugins/zsh-autosuggestions"
        update: no
      when: "'all' in selected_tasks or 'light' in selected_tasks or 'zsh-autosuggestions' in selected_tasks"

    - name: Install bat
      become: yes
      ansible.builtin.package:
        name: bat
        state: present
      when: "'all' in selected_tasks or 'light' in selected_tasks or 'bat' in selected_tasks"

    - name: Install zoxide
      ansible.builtin.shell: curl -sS https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | bash
      args:
        creates: "{{ ansible_env.HOME }}/.local/bin/zoxide"
      when: "'all' in selected_tasks or 'light' in selected_tasks or 'zoxide' in selected_tasks"
