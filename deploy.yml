---
# Run remotely via: ansible-playbook -i <inventory> deploy.yml --extra-vars "@/creds/<vault>.yml" --ask-vault-pass --private-key=<private-key-path>
# Run locally via: ansible-playbook deploy.yml -i localhost, --connection=local --ask-become-pass
# Or use helper script: ./deploy-local.sh
#
# Use tags to control which tasks run:
#   --tags "light" - Install lightweight tools and configs
#   --tags "heavy" - Install resource-intensive tools
#   --tags "zsh,tmux" - Install specific tools only
#   --skip-tags "heavy" - Install everything except heavy tools
# By default (no tags specified), all tasks will run
#
# Error handling: All tasks will continue on error, with a summary at the end
- name: Setup Development Environment
  hosts: all
  gather_facts: yes
  ignore_errors: yes
  vars:
    # Set ansible_user based on whether we're running locally or remotely
    # For localhost, use the current user; for remote, use vault variables
    ansible_user: "{{ vault_ansible_user | default(lookup('env', 'USER')) }}"
    ansible_sudo_pass: "{{ vault_sudo_pass | default(omit) }}"
    # Automatically detect localhost and set connection appropriately
    ansible_connection: "{{ 'local' if inventory_hostname in ['localhost', '127.0.0.1'] else 'ssh' }}"


  tasks:

    ### REQUIRED START ###
    - name: Ensure git is installed
      become: yes
      ansible.builtin.package:
        name: git
        state: present
      tags:
        - always

    - name: Ensure curl is installed
      become: yes
      ansible.builtin.package:
        name: curl
        state: present
      tags:
        - always

    - name: Clone koby-dev-env repository
      ansible.builtin.git:
        repo: https://github.com/KobyW/koby-dev-env
        dest: "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/koby-dev-env"
        version: main
        update: no
      tags:
        - always

    - name: Sync koby-dev-env repository
      ansible.builtin.git:
        repo: https://github.com/KobyW/koby-dev-env
        dest: "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/koby-dev-env"
        version: main
        update: yes
      tags:
        - never
        - sync

    - name: Install pip
      become: yes
      ansible.builtin.package:
        name: python3-pip
        state: present
      tags:
        - always

    - name: Ensure build-essential is installed
      become: yes
      ansible.builtin.package:
        name: build-essential
        state: present
      tags:
        - always

    - name: Ensure net-tools is installed
      become: yes
      ansible.builtin.package:
        name: net-tools
        state: present
      tags:
        - always

    - name: Ensure nmap is installed
      become: yes
      ansible.builtin.package:
        name: nmap
        state: present
      tags:
        - always

    - name: Install unzip
      become: yes
      ansible.builtin.package:
        name: unzip
        state: present
      tags:
        - always
    ### REQUIRED END ###


    ### LIGHT MISC START ###
    - name: Install bat
      become: yes
      ansible.builtin.package:
        name: bat
        state: present
      tags:
        - light
        - bat

    - name: Install zoxide
      ansible.builtin.shell: curl -sS https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | bash
      args:
        creates: "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/.local/bin/zoxide"
      tags:
        - light
        - zoxide

    - name: Install fzf
      become: yes
      ansible.builtin.package:
        name: fzf
        state: present
      tags:
        - light
        - fzf

    - name: Install expect
      become: yes
      ansible.builtin.package:
        name: expect
        state: present
      tags:
        - light
        - expect

    - name: Install wget
      become: yes
      ansible.builtin.package:
        name: wget
        state: present
      tags:
        - light
        - wget
    ### LIGHT MISC END ###


    ### ZSH START ###
    - name: Install zsh
      become: yes
      ansible.builtin.package:
        name: zsh
        state: present
      tags:
        - light
        - zsh

    - name: Check if Oh My Zsh is installed
      ansible.builtin.stat:
        path: "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/.oh-my-zsh"
      register: oh_my_zsh_installed
      tags:
        - light
        - zsh
        - oh-my-zsh

    - name: Install Oh My Zsh
      ansible.builtin.shell: sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
      when: 
        - not oh_my_zsh_installed.stat.exists
      tags:
        - light
        - zsh
        - oh-my-zsh

    - name: Install zsh-autosuggestions
      ansible.builtin.git:
        repo: https://github.com/zsh-users/zsh-autosuggestions
        dest: "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/.oh-my-zsh/custom/plugins/zsh-autosuggestions"
        update: no
      tags:
        - light
        - zsh
        - zsh-autosuggestions

    - name: Copy .zshrc to home directory
      block:

        - name: Backup existing .zshrc
          ansible.builtin.copy:
            src: "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/.zshrc"
            dest: "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/.zshrc.bak"
            remote_src: yes
          ignore_errors: yes

        - name: Link .zshrc
          ansible.builtin.file:
            src: "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/koby-dev-env/configs/zshrc"
            dest: "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/.zshrc"
            state: link
            force: yes

      tags:
        - light
        - zsh
        - zshrc-copy

    - name: Ensure zsh is the default shell
      become: yes
      ansible.builtin.user:
        name: "{{ ansible_user }}"
        shell: /bin/zsh
      tags:
        - light
        - zsh
        - zsh-shell

    - name: Export SHELL environment variable
      ansible.builtin.lineinfile:
        path: "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/.bashrc"
        line: 'export SHELL=/bin/zsh'
        create: yes
      tags:
        - light
        - zsh
        - zsh-shell
    ### ZSH END ###


    ### P10k START ###
    - name: Install P10K
      block:

        - name: Clone Powerlevel10k repository
          ansible.builtin.git:
            repo: 'https://github.com/romkatv/powerlevel10k.git'
              #dest: "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/.oh-my-zsh/custom/themes/powerlevel10k"
            dest: "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/powerlevel10k"
            depth: 1

        - name: Backup existing p10k.zsh
          ansible.builtin.copy:
            src: "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/.p10k.zsh"
            dest: "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/.p10k.zsh.bak"
            remote_src: yes
          ignore_errors: yes

        - name: Link p10k.zsh
          ansible.builtin.file:
            src: "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/koby-dev-env/configs/p10k.zsh"
            dest: "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/.p10k.zsh"
            state: link
            force: yes

      tags:
        - light
        - p10k
    ### P10k END ###


    ### NeoVim START ###
    # Note: For ARM64/aarch64, I use pre-built AppImage from matsuu/neovim-aarch64-appimage
    - name: Check current Neovim version
      ansible.builtin.shell: |
        if command -v nvim &> /dev/null; then
          nvim --version | head -n1
        else
          echo "No nvim found"
        fi
      register: current_nvim_version
      failed_when: false
      changed_when: false
      tags:
        - light
        - neovim

    - name: Display current Neovim version
      ansible.builtin.debug:
        msg: "Current Neovim: {{ current_nvim_version.stdout }}"
      tags:
        - light
        - neovim

    - name: Remove old Neovim installations
      become: yes
      block:
        - name: Remove system package manager Neovim
          ansible.builtin.package:
            name: 
              - neovim
              - nvim
            state: absent
          ignore_errors: yes

        - name: Remove all Neovim binaries and directories
          ansible.builtin.file:
            path: "{{ item }}"
            state: absent
          loop:
            - /usr/local/bin/nvim
            - /usr/bin/nvim
            - /usr/local/share/nvim
            - /usr/share/nvim
            - "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/.local/bin/nvim"
            - "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/.local/nvim-linux64"
            - "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/.local/nvim-appimage"
      when: "'NVIM v0.9' not in current_nvim_version.stdout"
      tags:
        - light
        - neovim

    - name: Install Neovim v0.9.5
      block:
        - name: Ensure directories exist
          ansible.builtin.file:
            path: "{{ item }}"
            state: directory
            mode: '0755'
          loop:
            - "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/.local"
            - "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/.local/bin"

        - name: Debug architecture
          ansible.builtin.debug:
            msg: "Detected architecture: {{ ansible_architecture }}"

        - name: Install Neovim for x86_64/amd64
          block:
            - name: Download Neovim v0.9.5 binary (x86_64)
              ansible.builtin.get_url:
                url: "https://github.com/neovim/neovim/releases/download/v0.9.5/nvim-linux64.tar.gz"
                dest: "/tmp/nvim-linux64.tar.gz"
                mode: '0644'

            - name: Extract Neovim
              ansible.builtin.unarchive:
                src: "/tmp/nvim-linux64.tar.gz"
                dest: "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/.local/"
                remote_src: yes
                creates: "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/.local/nvim-linux64"

            - name: Create symlink in user's local bin
              ansible.builtin.file:
                src: "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/.local/nvim-linux64/bin/nvim"
                dest: "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/.local/bin/nvim"
                state: link
                force: yes

            - name: Remove Neovim archive
              ansible.builtin.file:
                path: "/tmp/nvim-linux64.tar.gz"
                state: absent
          when: ansible_architecture in ['x86_64', 'amd64']

        - name: Install Neovim for ARM/other architectures
          block:
            - name: Download ARM64 Neovim AppImage
              ansible.builtin.get_url:
                url: "https://github.com/matsuu/neovim-aarch64-appimage/releases/download/v0.9.5/nvim-v0.9.5-aarch64.appimage"
                dest: "/tmp/nvim.appimage"
                mode: '0755'

            - name: Extract AppImage
              ansible.builtin.shell: |
                cd /tmp
                ./nvim.appimage --appimage-extract > /dev/null 2>&1
                rm -rf {{ ansible_env.HOME | default('/home/' + ansible_user) }}/.local/nvim-app
                mv squashfs-root {{ ansible_env.HOME | default('/home/' + ansible_user) }}/.local/nvim-app
              args:
                creates: "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/.local/nvim-app"

            - name: Create symlink for nvim
              ansible.builtin.file:
                src: "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/.local/nvim-app/AppRun"
                dest: "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/.local/bin/nvim"
                state: link
                force: yes

            - name: Clean up AppImage
              ansible.builtin.file:
                path: "/tmp/nvim.appimage"
                state: absent
          when: ansible_architecture not in ['x86_64', 'amd64']

        - name: Create symlink in /usr/local/bin
          become: yes
          ansible.builtin.file:
            src: "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/.local/bin/nvim"
            dest: "/usr/local/bin/nvim"
            state: link
            force: yes

        - name: Add Neovim to PATH in zshrc
          ansible.builtin.lineinfile:
            path: "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/.zshrc"
            line: "export PATH=\"{{ ansible_env.HOME | default('/home/' + ansible_user) }}/.local/bin:$PATH\""
            create: yes

        - name: Verify Neovim installation
          ansible.builtin.shell: |
            export PATH="{{ ansible_env.HOME | default('/home/' + ansible_user) }}/.local/bin:/usr/local/bin:$PATH"
            which nvim && nvim --version
          register: nvim_version
          changed_when: false
          failed_when: false

        - name: Display Neovim version
          ansible.builtin.debug:
            msg: "Neovim version installed: {{ nvim_version.stdout | default('Installation may have failed') }}"

      when: "'NVIM v0.9' not in current_nvim_version.stdout"
      tags:
        - light
        - neovim
    ### NeoVim END ###


    ### LunarVim START ###
    # Note: Using LunarVim release-1.3 for Neovim 0.9 compatibility
    # Master branch requires Neovim 0.10+ and will cause crashes on 0.9
    - name: Check if LunarVim is installed
      ansible.builtin.stat:
        path: "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/.local/bin/lvim"
      register: lunarvim_installed
      tags:
        - light
        - lunarvim
        - lvim

    - name: Install LunarVim
      block:
        - name: Ensure nvim v0.9+ is available
          ansible.builtin.shell: |
            export PATH="{{ ansible_env.HOME | default('/home/' + ansible_user) }}/.local/bin:/usr/local/bin:$PATH"
            which nvim && nvim --version
          register: nvim_check_before_lunar
          changed_when: false
          failed_when: >
            'NVIM v0.9' not in nvim_check_before_lunar.stdout and 
            'NVIM v0.10' not in nvim_check_before_lunar.stdout and
            'NVIM v0.11' not in nvim_check_before_lunar.stdout

        - name: Download and install LunarVim
          ansible.builtin.shell: |
            export PATH="{{ ansible_env.HOME | default('/home/' + ansible_user) }}/.local/bin:/usr/local/bin:$PATH"
            # Use release-1.3 for Neovim 0.9 compatibility
            export LV_BRANCH="release-1.3/neovim-0.9"
            curl -s https://raw.githubusercontent.com/LunarVim/LunarVim/${LV_BRANCH}/utils/installer/install.sh | bash -s -- --no-install-dependencies
          environment:
            LV_BRANCH: "release-1.3/neovim-0.9"
            PATH: "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/.local/bin:/usr/local/bin:{{ ansible_env.PATH }}"
          args:
            creates: "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/.local/bin/lvim"

      when: 
        - not lunarvim_installed.stat.exists
      tags:
        - light
        - lunarvim
        - lvim

    - name: Deploy LunarVim configuration
      block:
        - name: Ensure LunarVim config directory exists
          ansible.builtin.file:
            path: "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/.config/lvim"
            state: directory
            mode: '0755'

        - name: Backup existing config.lua
          ansible.builtin.copy:
            src: "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/.config/lvim/config.lua"
            dest: "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/.config/lvim/config.lua.bak"
            remote_src: yes
          ignore_errors: yes

        - name: Link LunarVim config
          ansible.builtin.file:
            src: "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/koby-dev-env/configs/LVIMconfig.lua"
            dest: "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/.config/lvim/config.lua"
            state: link
            force: yes

        - name: Ensure custom lua modules directory exists
          ansible.builtin.file:
            path: "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/.config/lvim/lua"
            state: directory
            mode: '0755'

        - name: Link lua/koby directory
          ansible.builtin.file:
            src: "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/koby-dev-env/configs/lua/koby"
            dest: "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/.config/lvim/lua/koby"
            state: link
            force: yes

      tags:
        - light
        - lunarvim
        - lvim
        - lvim-config
    ### LunarVim END ###


    ### TMUX START ###
    - name: Install tmux
      become: yes
      ansible.builtin.package:
        name: tmux
        state: present
      tags:
        - light
        - tmux

    - name: Install tpm (tmux plugin manager)
      ansible.builtin.git:
        repo: https://github.com/tmux-plugins/tpm
        dest: "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/.tmux/plugins/tpm"
        update: no
      tags:
        - light
        - tmux
        - tpm

    - name: Copy .tmux.conf to home directory
      block:
        - name: Backup existing .tmux.conf
          ansible.builtin.copy:
            src: "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/.tmux.conf"
            dest: "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/.tmux.conf.bak"
            remote_src: yes
          ignore_errors: yes
        - name: Link .tmux.conf
          ansible.builtin.file:
            src: "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/koby-dev-env/configs/tmux.conf"
            dest: "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/.tmux.conf"
            state: link
            force: yes
      tags:
        - light
        - tmux
        - tmux-copy
    ### TMUX END ###


    ### PFETCH START ###
    - name: Check if pfetch is installed
      ansible.builtin.stat:
        path: /usr/local/bin/pfetch
      register: pfetch_installed
      tags:
        - light
        - pfetch

    - name: Install pfetch
      block:

        - name: Download pfetch
          ansible.builtin.get_url:
            url: https://github.com/dylanaraps/pfetch/archive/master.zip
            dest: /tmp/pfetch-master.zip
        - name: Unzip pfetch
          ansible.builtin.unarchive:
            src: /tmp/pfetch-master.zip
            dest: /tmp/
            remote_src: yes
        - name: Install pfetch
          become: yes
          ansible.builtin.copy:
            src: /tmp/pfetch-master/pfetch
            dest: /usr/local/bin/pfetch
            mode: '0755'
            remote_src: yes
        - name: Clean up pfetch files
          ansible.builtin.file:
            path: "{{ item }}"
            state: absent
          loop:
            - /tmp/pfetch-master.zip
            - /tmp/pfetch-master

      when: 
        - not pfetch_installed.stat.exists
      tags:
        - light
        - pfetch
    ### PFETCH END ###


    ### LAZY TOOLING START ###
    - name: Install Lazydocker
      ansible.builtin.shell: curl https://raw.githubusercontent.com/jesseduffield/lazydocker/master/scripts/install_update_linux.sh | bash
      args:
        creates: /usr/local/bin/lazydocker
      tags:
        - light
        - lazydocker

    - name: Check if Lazygit is installed
      ansible.builtin.stat:
        path: /usr/local/bin/lazygit
      register: lazygit_installed
      tags:
        - light
        - lazygit

    - name: Install Lazygit
      block:
        
        - name: Set Lazygit download URL based on architecture
          ansible.builtin.set_fact:
            lazygit_url: "{{ 'https://github.com/jesseduffield/lazygit/releases/download/v0.43.1/lazygit_0.43.1_Linux_arm64.tar.gz' if ansible_architecture == 'aarch64' else 'https://github.com/jesseduffield/lazygit/releases/download/v0.43.1/lazygit_0.43.1_Linux_x86_64.tar.gz' }}"
        
        - name: Download Lazygit
          ansible.builtin.get_url:
            url: "{{ lazygit_url }}"
            dest: /tmp/lazygit.tar.gz
        - name: Extract Lazygit
          ansible.builtin.unarchive:
            src: /tmp/lazygit.tar.gz
            dest: /tmp/
            remote_src: yes
        - name: Install Lazygit
          become: yes
          ansible.builtin.copy:
            src: /tmp/lazygit
            dest: /usr/local/bin/lazygit
            mode: '0755'
            remote_src: yes
        - name: Clean up Lazygit files
          ansible.builtin.file:
            path: "{{ item }}"
            state: absent
          loop:
            - /tmp/lazygit.tar.gz
            - /tmp/lazygit

      when: 
        - not lazygit_installed.stat.exists
      tags:
        - light
        - lazygit
    ### LAZY TOOLING END ###


    ### MISC HEAVY START ###
    - name: Install cargo
      ansible.builtin.shell: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      args:
        creates: "{{ ansible_env.HOME | default('/home/' + ansible_user) }}/.cargo/bin/cargo"
      tags:
        - heavy
        - cargo

    - name: Install docker.io
      become: yes
      ansible.builtin.package:
        name: docker.io
        state: present
      tags:
        - heavy
        - docker

    - name: Install npm
      become: yes
      ansible.builtin.package:
        name: npm
        state: present
      tags:
        - heavy
        - npm
    ### MISC HEAVY END ###
